<?php
use \ArtfulRobot\CsvParser;
const WORKING_YEARS=45;
function etgenderpaygap_menu() {
  return [
    'admin/config/etgenderpaygap' => [
      'page callback'    => 'drupal_get_form',
      'page arguments'   => ['etgenderpaygap__form_config'],
      'access arguments' => ['administer etgenderpaygap'],
      'title'            => 'Configure Gender Pay Gap',
      'type'             => MENU_NORMAL_ITEM,
    ],

    'etgenderpaygap/matches' => [
      'page callback'   => 'etgenderpaygap__page_matches',
      'access callback' => TRUE,
    ],

    'etgenderpaygap/submit' => [
      'page callback'   => 'etgenderpaygap__page_submit',
      'access callback' => TRUE,
    ],
  ];
}

/**
 * Implements hook_permission
 */
function etgenderpaygap_permission() {
  return [
    'administer etgenderpaygap' => [
      'title' => 'Administer Equality Trust Gender Pay Gap tool',
      'description' => 'Provides access for uploading new data and editing totals.',
    ],
  ];
}
/**
 * Implements hook_block_info().
 */
function etgenderpaygap_block_info() {
  $blocks['etgenderpaygap_form'] = [
    'info' => t('Equality Trust Gender Pay Gap Form'),
    'cache' => DRUPAL_NO_CACHE,
  ];

  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function etgenderpaygap_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'etgenderpaygap_form':
      $block['subject'] = '';
      $block['content'] = etgenderpaygap__block_form();
      break;
  }
  return $block;
}
/**
 * JSON API.
 */
function etgenderpaygap__page_matches() {
  $matcher = new ETGenderPayGapMatcher($_GET['key'] ?? '');
  $output = $matcher->matches();
  drupal_json_output($output);
  drupal_exit();
}
/**
 * Restrict access to XHR requests.
 */
function etgenderpaygap__access_matches() {
  return (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest');
}

/**
 * JSON API.
 *
 * Takes params:
 * - company (id)
 * - salary (required)
 * - bonus (optional)
 *
 * Outputs: {
 *  lifetimeLoss: 123456,
 *  count: 123,
 *  totalLifetimeLoss: 1231313123
 * }
 */
function etgenderpaygap__page_submit() {
  $company_id = (int) $_POST['company'] ?? 0;
  if ($company_id) {
    $company = db_query(
      'SELECT * FROM etgenderpaygap_companies WHERE id = :theid;',
      [':theid' => $company_id]
    )->fetchAssoc();
    if (!$company) {
      // Spam?
      drupal_json_output(['error' => 'Invalid request']);
      drupal_exit();
    }
  }
  else {
    $company = [
      'name' => 'Average UK company',
      'paygap_hours' => variable_get('etgenderpaygap_avg_paygap', 0),
      'paygap_bonus' => variable_get('etgenderpaygap_avg_bonusgap', 0),
    ];
  }
  if (empty($_POST['salary'])) {
    drupal_json_output(['error' => 'Invalid request']);
    drupal_exit();
  }
  // OK got everything we need.
  $loss = 0;
  if ($company['paygap_hours'] > 0) {
    $salary = (int) preg_replace('/[,£]/', '', trim($_POST['salary']));
    if (!$salary > 0) {
      drupal_json_output(['error' => 'Salary incorrectly entered']);
      drupal_exit();
    }
    $loss += $company['paygap_hours'] / 100 * $salary * WORKING_YEARS;
  }
  if ($company['paygap_bonus'] > 0 && !empty(trim($_POST['bonus']))) {
    $bonus = (int) preg_replace('/[,£]/', '', trim($_POST['bonus']));
    if (!$salary > 0) {
      drupal_json_output(['error' => 'Salary incorrectly entered']);
      drupal_exit();
    }
    $loss += $company['paygap_bonus'] / 100 * $bonus * WORKING_YEARS;
  }
  $total_loss = variable_get('etgenderpaygap_loss', 0) + $loss;
  $count = variable_get('etgenderpaygap_count', 0) + 1;
  variable_set('etgenderpaygap_loss', $total_loss);
  variable_set('etgenderpaygap_count', $count);

  $output = [
    'lifetimeLoss'      => '£' . number_format($loss, 0),
    'count'             => $count,
    'lifetimeLossTotal' => '£' . number_format($total_loss, 0),
    'paygap_salary'     => (float) $company['paygap_hours'],
    'paygap_bonus'      => (float) $company['paygap_hours'],
    'company'           => $company['name'],
  ];

  drupal_json_output($output);
  drupal_exit();
}
/**
 * Creates the petition block.
 */
function etgenderpaygap__block_form() {
  $our_path = drupal_get_path('module', 'etgenderpaygap');
  $content = [
    '#attached' => [
      'js'  => [ "$our_path/js/etgenderpaygap.js" ],
      'css' => [ "$our_path/css/etgenderpaygap.css" ],
    ],
    '#markup' => '<div class="etgpg"><noscript>Please enable Javascript in your browser.</noscript></div>',
  ];
  return $content;
}
function etgenderpaygap__form_config($form, &$form_state) {
  $form['etgenderpaygap_avg_paygap'] = [
    '#title'       => 'Average paygap percent',
    '#required'    => TRUE,
    '#description' => 'This will be used if the user cannot find their company in the list.',
    '#type'        => 'textfield',
    '#default_value' => variable_get('etgenderpaygap_avg_paygap', 0),
  ];
  $form['etgenderpaygap_avg_bonusgap'] = [
    '#title'       => 'Average bonus gap percent',
    '#required'    => TRUE,
    '#description' => 'This will be used if the user cannot find their company in the list.',
    '#type'        => 'textfield',
    '#default_value' => variable_get('etgenderpaygap_avg_bonusgap', 0),
  ];
  $form['etgenderpaygap_loss'] = [
    '#title'       => 'Total accumulated loss',
    '#required'    => TRUE,
    '#description' => 'Normally you would not change this here, it is updated automatically.',
    '#type'        => 'textfield',
    '#default_value' => variable_get('etgenderpaygap_loss', 0),
  ];
  $form['etgenderpaygap_count'] = [
    '#title'       => 'Total participants',
    '#required'    => TRUE,
    '#description' => 'Normally you would not change this here, it is updated automatically.',
    '#type'        => 'textfield',
    '#default_value' => variable_get('etgenderpaygap_count', 0),
  ];
  $form['etgenderpaygap_data'] = [
    '#title'             => 'Data source',
    '#description'       => 'Use this to upload replacement data',
    '#type'              => 'managed_file',
    '#upload_location'   => 'private://etgenderpaygap/',
    '#upload_validators' => ['file_validate_extensions' => ['csv']],
    '#default_value'     => variable_get('etgenderpaygap_data', NULL),
  ];
  $form['#submit'][] = 'etgenderpaygap__form_config_submit';
  return system_settings_form($form);
}
function etgenderpaygap__form_config_validate($form, &$form_state) {
  // If a new file was uploaded, check it looks correct.
  $orig = variable_get('etgenderpaygap_data', NULL);
  $form_state['new_file_was_uploaded'] = ($orig != $form_state["values"]["etgenderpaygap_data"]);
  if ($orig != $form_state["values"]["etgenderpaygap_data"]) {
    // Test newly uploaded file.
    $file = file_load($form_state['values']['etgenderpaygap_data']);

    require_once __DIR__ . "/vendor/CsvParser.php";
    $csv = CsvParser::createFromFile($file->uri);
    $headers = $csv->getHeaders();
    $missing = [];
    foreach (['EmployerName', 'DiffMeanHourlyPercent', 'DiffMeanBonusPercent'] as $_) {
      if (!in_array($_, $headers)) {
        $missing[] = $_;
      }
    }
    if ($missing) {
      form_set_error('etgenderpaygap_data', "The CSV file is missing these columns: " . implode(', ', $missing));
    }
    else {
    }
  }
}
function etgenderpaygap__form_config_submit($form, &$form_state) {
  // If a new file was uploaded, check it looks correct.
  if ($form_state['new_file_was_uploaded'] ?? FALSE) {
    $file = file_load($form_state['values']['etgenderpaygap_data']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'etgenderpaygap', 'etgenerpaygap', 0);
    require_once __DIR__ . "/vendor/CsvParser.php";
    $csv = CsvParser::createFromFile($file->uri);

    // Drop old data.
    db_query('TRUNCATE etgenderpaygap_companies');

    $success = 0;
    foreach ($csv as $row) {
      $x = [
        'name' => trim($row->EmployerName),
        'paygap_hours' => (float) $row->DiffMeanHourlyPercent,
        'paygap_bonus' => $row->DiffMeanBonusPercent,
      ];
      $x['paygap_bonus'] = empty($x['paygap_bonus']) ? NULL : (float) $x['paygap_bonus'];
      if (!$x['name']) {
        continue;
      }
      db_insert('etgenderpaygap_companies')
        ->fields($x)
        ->execute();
      $success++;
    }
    drupal_set_message($success . " companies' data uploaded.", 'status');
  }
}
class ETGenderPayGapMatcher
{
  /** @var array of search keys. */
  protected $keys;

  public function __construct($search_key) {
    $key = strtolower(trim($_GET['company']));
    $this->keys = array_filter(preg_split('/[^a-z0-9]+/', $key));
  }
  /**
   *
   * @return Array of matching rows (limit of 10)
   */
  public function matches() {
    if (!$this->keys) {
      return [];
    }

    // First assume each key is sequential and must exist.
    $start = implode('%', $this->keys) . '%';
    $anywhere = '%' . $start;
    $matches = db_query("
        SELECT id, name
        FROM etgenderpaygap_companies
        WHERE name LIKE :anywhere
        ORDER BY NOT name LIKE :start, name
        LIMIT 10", [':anywhere' => $anywhere, ':start' => $start])
      ->fetchAllAssoc('id');
    $count = count($matches);
    $matches = array_values($matches);
    /*
    foreach ($matches as &$row) {
      $row->paygap_hours = (float) $row->paygap_hours;
      $row->paygap_bonus = (float) $row->paygap_bonus;
    }
    unset($row);
     */

    if ($count == 10) {
      // We hit 10, are there more?
      $count = (int) db_query("
        SELECT COUNT(*) c
        FROM etgenderpaygap_companies
        WHERE name LIKE :anywhere", [':anywhere' => $anywhere])
      ->fetchField();
    }

    if ($count == 0) {
      // We didn't find any. Try searching in any order.
      $params = [];
      $sql = [];
      foreach ($this->keys as $i => $k) {
        $params[":key$i"] = '%' . $k . '%';
        $sql[] = "name LIKE :key$i";
      }
      $sql = "SELECT id, name FROM etgenderpaygap_companies WHERE " . implode(' AND ', $sql)
        . " ORDER BY name";
      $result = db_query($sql, $params);
      $count = $result->rowCount();
      $i=0;
      while ($row = $result->fetchAssoc()) {
        $matches[] = $row;
        if (++$i == 10) {
          break;
        }
      }
    }

    return [
      'matches' => $matches,
      'count' => $count,
    ];
    if ($matches) {
      return $matches;
    }
  }
}
